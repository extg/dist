{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./shared/getMinMax.js","webpack://[name]/./shared/decoders/decodeJPEGLS.js","webpack://[name]/./shared/decoders/decodeJPEG2000.js","webpack://[name]/./version.js","webpack://[name]/./shared/calculateMinMax.js","webpack://[name]/./shared/decoders/decodeLittleEndian.js","webpack://[name]/./shared/decoders/decodeBigEndian.js","webpack://[name]/./shared/decoders/decodeRLE.js","webpack://[name]/./shared/decoders/decodeJPEGBaseline.js","webpack://[name]/./shared/decoders/decodeJPEGLossless.js","webpack://[name]/./shared/decodeImageFrame.js","webpack://[name]/./webWorker/webWorker.js","webpack://[name]/./webWorker/decodeTask/decodeTask.js","webpack://[name]/./webWorker/index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","m","getMinMax","storedPixelData","storedPixel","min","max","numPixels","length","index","Math","charLS","initializeJPEGLS","CharLS","Error","_jpegls_decode","d","__webpack_exports__","decodeJPEGLS","imageFrame","pixelData","image","data","isSigned","dataPtr","_malloc","writeArrayToMemory","imagePtrPtr","imageSizePtr","widthPtr","heightPtr","bitsPerSamplePtr","stridePtr","allowedLossyErrorPtr","componentsPtr","interleaveModePtr","result","ccall","width","getValue","height","bitsPerSample","stride","components","allowedLossyError","interleaveMode","undefined","imagePtr","Uint8Array","set","HEAP8","buffer","Int16Array","HEAP16","Uint16Array","_free","jpegLSDecode","pixelRepresentation","concat","columns","rows","openJPEG","decodeOpenJpeg2000","bytesPerPixel","signed","imageSizeXPtr","imageSizeYPtr","imageSizeCompPtr","t0","Date","getTime","console","log","sx","sy","nbChannels","perf_timetodecode","src32","Int32Array","HEAP32","from","i","t1","decodeOpenJPEG","bitsAllocated","photometricInterpretation","initializeJPEG2000","decodeConfig","usePDFJS","OpenJPEG","_jp2_decode","decodeJPEG2000","options","arguments","jpxImage","JpxImage","parse","tileCount","tiles","items","decodeJpx","calculateMinMax","_getMinMax_js__WEBPACK_IMPORTED_MODULE_0__","strict","minMax","mustAssign","isNumber","smallestPixelValue","largestPixelValue","warn","numValue","decodeLittleEndian","arrayBuffer","offset","byteOffset","slice","Float32Array","decodeBigEndian","val","decodeRLE","planarConfiguration","frameData","frameSize","outFrame","ArrayBuffer","samplesPerPixel","header","DataView","Int8Array","out","outIndex","numSegments","getInt32","s","inIndex","maxIndex","endOfSegment","n","value","j","decode8Planar","decode8","highByte","decode16","decodeJPEGBaseline","JpegImage","jpeg","colorTransform","getData","getData16","decodeJPEGLossless","lossless","Decoder","byteOutput","decompressedData","decode","decodeImageFrame","transferSyntax","start","shouldShift","shift","bitsStored","end","decodeTimeInMS","config","taskHandlers","initialized","registerTaskHandler","taskHandler","taskType","initialize","taskConfiguration","self","onmessage","msg","handler","transferList","postMessage","status","workerIndex","importScripts","sourcePath","loadWebWorkerTask","webWorkerTaskPaths","Object","keys","forEach","key","codecsLoaded","loadCodecs","decodeTask","codecsPath","initializeCodecsOnStartup","doneCallback","loadCodecsOnStartup","version","cornerstoneWADOImageLoaderWebWorker","c","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","t","mode","__esModule","ns","create","bind","object","property","prototype","hasOwnProperty","call","p","moduleId","l","modules"],"mappings":"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","file":"cornerstoneWADOImageLoaderWebWorker.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"cornerstoneWADOImageLoaderWebWorker\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cornerstoneWADOImageLoaderWebWorker\"] = factory();\n\telse\n\t\troot[\"cornerstoneWADOImageLoaderWebWorker\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","/**\n * Calculate the minimum and maximum values in an Array\n *\n * @param {Number[]} storedPixelData\n * @return {{min: Number, max: Number}}\n */\nfunction getMinMax (storedPixelData) {\n  // we always calculate the min max values since they are not always\n  // present in DICOM and we don't want to trust them anyway as cornerstone\n  // depends on us providing reliable values for these\n  let min = storedPixelData[0];\n  let max = storedPixelData[0];\n  let storedPixel;\n  const numPixels = storedPixelData.length;\n\n  for (let index = 1; index < numPixels; index++) {\n    storedPixel = storedPixelData[index];\n    min = Math.min(min, storedPixel);\n    max = Math.max(max, storedPixel);\n  }\n\n  return {\n    min,\n    max\n  };\n}\n\nexport default getMinMax;\n","let charLS;\n\nfunction jpegLSDecode (data, isSigned) {\n  // prepare input parameters\n  const dataPtr = charLS._malloc(data.length);\n\n  charLS.writeArrayToMemory(data, dataPtr);\n\n  // prepare output parameters\n  const imagePtrPtr = charLS._malloc(4);\n  const imageSizePtr = charLS._malloc(4);\n  const widthPtr = charLS._malloc(4);\n  const heightPtr = charLS._malloc(4);\n  const bitsPerSamplePtr = charLS._malloc(4);\n  const stridePtr = charLS._malloc(4);\n  const allowedLossyErrorPtr = charLS._malloc(4);\n  const componentsPtr = charLS._malloc(4);\n  const interleaveModePtr = charLS._malloc(4);\n\n  // Decode the image\n  const result = charLS.ccall(\n    'jpegls_decode',\n    'number',\n    ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number'],\n    [dataPtr, data.length, imagePtrPtr, imageSizePtr, widthPtr, heightPtr, bitsPerSamplePtr, stridePtr, componentsPtr, allowedLossyErrorPtr, interleaveModePtr]\n  );\n\n  // Extract result values into object\n  const image = {\n    result,\n    width: charLS.getValue(widthPtr, 'i32'),\n    height: charLS.getValue(heightPtr, 'i32'),\n    bitsPerSample: charLS.getValue(bitsPerSamplePtr, 'i32'),\n    stride: charLS.getValue(stridePtr, 'i32'),\n    components: charLS.getValue(componentsPtr, 'i32'),\n    allowedLossyError: charLS.getValue(allowedLossyErrorPtr, 'i32'),\n    interleaveMode: charLS.getValue(interleaveModePtr, 'i32'),\n    pixelData: undefined\n  };\n\n  // Copy image from emscripten heap into appropriate array buffer type\n  const imagePtr = charLS.getValue(imagePtrPtr, '*');\n\n  if (image.bitsPerSample <= 8) {\n    image.pixelData = new Uint8Array(image.width * image.height * image.components);\n    image.pixelData.set(new Uint8Array(charLS.HEAP8.buffer, imagePtr, image.pixelData.length));\n  } else if (isSigned) {\n    image.pixelData = new Int16Array(image.width * image.height * image.components);\n    image.pixelData.set(new Int16Array(charLS.HEAP16.buffer, imagePtr, image.pixelData.length));\n  } else {\n    image.pixelData = new Uint16Array(image.width * image.height * image.components);\n    image.pixelData.set(new Uint16Array(charLS.HEAP16.buffer, imagePtr, image.pixelData.length));\n  }\n\n  // free memory and return image object\n  charLS._free(dataPtr);\n  charLS._free(imagePtr);\n  charLS._free(imagePtrPtr);\n  charLS._free(imageSizePtr);\n  charLS._free(widthPtr);\n  charLS._free(heightPtr);\n  charLS._free(bitsPerSamplePtr);\n  charLS._free(stridePtr);\n  charLS._free(componentsPtr);\n  charLS._free(interleaveModePtr);\n\n  return image;\n}\n\nfunction initializeJPEGLS () {\n  // check to make sure codec is loaded\n  if (typeof CharLS === 'undefined') {\n    throw new Error('No JPEG-LS decoder loaded');\n  }\n\n  // Try to initialize CharLS\n  // CharLS https://github.com/cornerstonejs/charls\n  if (!charLS) {\n    charLS = CharLS();\n    if (!charLS || !charLS._jpegls_decode) {\n      throw new Error('JPEG-LS failed to initialize');\n    }\n  }\n\n}\n\nfunction decodeJPEGLS (imageFrame, pixelData) {\n  initializeJPEGLS();\n\n  const image = jpegLSDecode(pixelData, imageFrame.pixelRepresentation === 1);\n\n  // throw error if not success or too much data\n  if (image.result !== 0 && image.result !== 6) {\n    throw new Error(`JPEG-LS decoder failed to decode frame (error code ${image.result})`);\n  }\n\n  imageFrame.columns = image.width;\n  imageFrame.rows = image.height;\n  imageFrame.pixelData = image.pixelData;\n\n  return imageFrame;\n}\n\nexport default decodeJPEGLS;\nexport { initializeJPEGLS };\n","function decodeJpx (imageFrame, pixelData) {\n  const jpxImage = new JpxImage();\n\n  jpxImage.parse(pixelData);\n\n  const tileCount = jpxImage.tiles.length;\n\n  if (tileCount !== 1) {\n    throw new Error(`JPEG2000 decoder returned a tileCount of ${tileCount}, when 1 is expected`);\n  }\n\n  imageFrame.columns = jpxImage.width;\n  imageFrame.rows = jpxImage.height;\n  imageFrame.pixelData = jpxImage.tiles[0].items;\n\n  return imageFrame;\n}\n\nlet openJPEG;\n\nfunction decodeOpenJPEG (data, bytesPerPixel, signed) {\n  const dataPtr = openJPEG._malloc(data.length);\n\n  openJPEG.writeArrayToMemory(data, dataPtr);\n\n  // create param outpout\n  const imagePtrPtr = openJPEG._malloc(4);\n  const imageSizePtr = openJPEG._malloc(4);\n  const imageSizeXPtr = openJPEG._malloc(4);\n  const imageSizeYPtr = openJPEG._malloc(4);\n  const imageSizeCompPtr = openJPEG._malloc(4);\n\n  const t0 = new Date().getTime();\n  const ret = openJPEG.ccall('jp2_decode', 'number', ['number', 'number', 'number', 'number', 'number', 'number', 'number'],\n    [dataPtr, data.length, imagePtrPtr, imageSizePtr, imageSizeXPtr, imageSizeYPtr, imageSizeCompPtr]);\n  // add num vomp..etc\n\n  if (ret !== 0) {\n    console.log('[opj_decode] decoding failed!');\n    openJPEG._free(dataPtr);\n    openJPEG._free(openJPEG.getValue(imagePtrPtr, '*'));\n    openJPEG._free(imageSizeXPtr);\n    openJPEG._free(imageSizeYPtr);\n    openJPEG._free(imageSizePtr);\n    openJPEG._free(imageSizeCompPtr);\n\n    return;\n  }\n\n  const imagePtr = openJPEG.getValue(imagePtrPtr, '*');\n\n  const image = {\n    length: openJPEG.getValue(imageSizePtr, 'i32'),\n    sx: openJPEG.getValue(imageSizeXPtr, 'i32'),\n    sy: openJPEG.getValue(imageSizeYPtr, 'i32'),\n    nbChannels: openJPEG.getValue(imageSizeCompPtr, 'i32'), // hard coded for now\n    perf_timetodecode: undefined,\n    pixelData: undefined\n  };\n\n  // Copy the data from the EMSCRIPTEN heap into the correct type array\n  const length = image.sx * image.sy * image.nbChannels;\n  const src32 = new Int32Array(openJPEG.HEAP32.buffer, imagePtr, length);\n\n  if (bytesPerPixel === 1) {\n    if (Uint8Array.from) {\n      image.pixelData = Uint8Array.from(src32);\n    } else {\n      image.pixelData = new Uint8Array(length);\n      for (let i = 0; i < length; i++) {\n        image.pixelData[i] = src32[i];\n      }\n    }\n  } else if (signed) {\n    if (Int16Array.from) {\n      image.pixelData = Int16Array.from(src32);\n    } else {\n      image.pixelData = new Int16Array(length);\n      for (let i = 0; i < length; i++) {\n        image.pixelData[i] = src32[i];\n      }\n    }\n  } else if (Uint16Array.from) {\n    image.pixelData = Uint16Array.from(src32);\n  } else {\n    image.pixelData = new Uint16Array(length);\n    for (let i = 0; i < length; i++) {\n      image.pixelData[i] = src32[i];\n    }\n  }\n\n  const t1 = new Date().getTime();\n\n  image.perf_timetodecode = t1 - t0;\n\n  // free\n  openJPEG._free(dataPtr);\n  openJPEG._free(imagePtrPtr);\n  openJPEG._free(imagePtr);\n  openJPEG._free(imageSizePtr);\n  openJPEG._free(imageSizeXPtr);\n  openJPEG._free(imageSizeYPtr);\n  openJPEG._free(imageSizeCompPtr);\n\n  return image;\n}\n\nfunction decodeOpenJpeg2000 (imageFrame, pixelData) {\n  const bytesPerPixel = imageFrame.bitsAllocated <= 8 ? 1 : 2;\n  const signed = imageFrame.pixelRepresentation === 1;\n\n  const image = decodeOpenJPEG(pixelData, bytesPerPixel, signed);\n\n  imageFrame.columns = image.sx;\n  imageFrame.rows = image.sy;\n  imageFrame.pixelData = image.pixelData;\n  if (image.nbChannels > 1) {\n    imageFrame.photometricInterpretation = 'RGB';\n  }\n\n  return imageFrame;\n}\n\nfunction initializeJPEG2000 (decodeConfig) {\n  // check to make sure codec is loaded\n  if (!decodeConfig.usePDFJS) {\n    if (typeof OpenJPEG === 'undefined') {\n      throw new Error('OpenJPEG decoder not loaded');\n    }\n  }\n\n  if (!openJPEG) {\n    openJPEG = OpenJPEG();\n    if (!openJPEG || !openJPEG._jp2_decode) {\n      throw new Error('OpenJPEG failed to initialize');\n    }\n  }\n}\n\nfunction decodeJPEG2000 (imageFrame, pixelData, decodeConfig, options = {}) {\n  initializeJPEG2000(decodeConfig);\n\n  if (options.usePDFJS || decodeConfig.usePDFJS) {\n    // OHIF image-JPEG2000 https://github.com/OHIF/image-JPEG2000\n    // console.log('PDFJS')\n    return decodeJpx(imageFrame, pixelData);\n  }\n\n  // OpenJPEG2000 https://github.com/jpambrun/openjpeg\n  // console.log('OpenJPEG')\n  return decodeOpenJpeg2000(imageFrame, pixelData);\n}\n\nexport default decodeJPEG2000;\nexport { initializeJPEG2000 };\n","export default '2.2.3';\n","import getMinMax from './getMinMax.js';\n\n/**\n * Check the minimum and maximum values in the imageFrame pixel data\n * match with the provided smallestPixelValue and largestPixelValue metaData.\n *\n * If 'strict' is true, log to the console a warning if these values do not match.\n * Otherwise, correct them automatically.\n *\n * @param {Object} imageFrame\n * @param {Boolean} strict If 'strict' is true, log to the console a warning if these values do not match.\n * Otherwise, correct them automatically.Default is true.\n */\nexport default function calculateMinMax (imageFrame, strict = true) {\n  const minMax = getMinMax(imageFrame.pixelData);\n  const mustAssign = !(isNumber(imageFrame.smallestPixelValue) && isNumber(imageFrame.largestPixelValue));\n\n\n  if (strict === true && !mustAssign) {\n    if (imageFrame.smallestPixelValue !== minMax.min) {\n      console.warn('Image smallestPixelValue tag is incorrect. Rendering performance will suffer considerably.');\n    }\n\n    if (imageFrame.largestPixelValue !== minMax.max) {\n      console.warn('Image largestPixelValue tag is incorrect. Rendering performance will suffer considerably.');\n    }\n  } else {\n    imageFrame.smallestPixelValue = minMax.min;\n    imageFrame.largestPixelValue = minMax.max;\n  }\n}\n\nfunction isNumber (numValue) {\n  return typeof numValue === 'number';\n}\n","function decodeLittleEndian (imageFrame, pixelData) {\n  let arrayBuffer = pixelData.buffer;\n  let offset = pixelData.byteOffset;\n  const length = pixelData.length;\n\n  if (imageFrame.bitsAllocated === 16) {\n    // if pixel data is not aligned on even boundary, shift it so we can create the 16 bit array\n    // buffers on it\n    if (offset % 2) {\n      arrayBuffer = arrayBuffer.slice(offset);\n      offset = 0;\n    }\n\n    if (imageFrame.pixelRepresentation === 0) {\n      imageFrame.pixelData = new Uint16Array(arrayBuffer, offset, length / 2);\n    } else {\n      imageFrame.pixelData = new Int16Array(arrayBuffer, offset, length / 2);\n    }\n  } else if (imageFrame.bitsAllocated === 8 || imageFrame.bitsAllocated === 1) {\n    imageFrame.pixelData = pixelData;\n  } else if (imageFrame.bitsAllocated === 32) {\n    // if pixel data is not aligned on even boundary, shift it\n    if (offset % 2) {\n      arrayBuffer = arrayBuffer.slice(offset);\n      offset = 0;\n    }\n\n    imageFrame.pixelData = new Float32Array(arrayBuffer, offset, length / 4);\n  }\n\n  return imageFrame;\n}\n\nexport default decodeLittleEndian;\n","/* eslint no-bitwise: 0 */\nfunction swap16 (val) {\n  return ((val & 0xFF) << 8) |\n    ((val >> 8) & 0xFF);\n}\n\n\nfunction decodeBigEndian (imageFrame, pixelData) {\n  if (imageFrame.bitsAllocated === 16) {\n    let arrayBuffer = pixelData.buffer;\n    let offset = pixelData.byteOffset;\n    const length = pixelData.length;\n    // if pixel data is not aligned on even boundary, shift it so we can create the 16 bit array\n    // buffers on it\n\n    if (offset % 2) {\n      arrayBuffer = arrayBuffer.slice(offset);\n      offset = 0;\n    }\n\n    if (imageFrame.pixelRepresentation === 0) {\n      imageFrame.pixelData = new Uint16Array(arrayBuffer, offset, length / 2);\n    } else {\n      imageFrame.pixelData = new Int16Array(arrayBuffer, offset, length / 2);\n    }\n    // Do the byte swap\n    for (let i = 0; i < imageFrame.pixelData.length; i++) {\n      imageFrame.pixelData[i] = swap16(imageFrame.pixelData[i]);\n    }\n\n  } else if (imageFrame.bitsAllocated === 8) {\n    imageFrame.pixelData = pixelData;\n  }\n\n  return imageFrame;\n}\n\nexport default decodeBigEndian;\n","function decodeRLE (imageFrame, pixelData) {\n  if (imageFrame.bitsAllocated === 8) {\n    if (imageFrame.planarConfiguration) {\n      return decode8Planar(imageFrame, pixelData);\n    }\n\n    return decode8(imageFrame, pixelData);\n  } else if (imageFrame.bitsAllocated === 16) {\n    return decode16(imageFrame, pixelData);\n  }\n\n  throw new Error('unsupported pixel format for RLE');\n}\n\nfunction decode8 (imageFrame, pixelData) {\n  const frameData = pixelData;\n  const frameSize = imageFrame.rows * imageFrame.columns;\n  const outFrame = new ArrayBuffer(frameSize * imageFrame.samplesPerPixel);\n  const header = new DataView(frameData.buffer, frameData.byteOffset);\n  const data = new Int8Array(frameData.buffer, frameData.byteOffset);\n  const out = new Int8Array(outFrame);\n\n  let outIndex = 0;\n  const numSegments = header.getInt32(0, true);\n\n  for (let s = 0; s < numSegments; ++s) {\n    outIndex = s;\n\n    let inIndex = header.getInt32((s + 1) * 4, true);\n    let maxIndex = header.getInt32((s + 2) * 4, true);\n\n    if (maxIndex === 0) {\n      maxIndex = frameData.length;\n    }\n\n    const endOfSegment = frameSize * numSegments;\n\n    while (inIndex < maxIndex) {\n      const n = data[inIndex++];\n\n      if (n >= 0 && n <= 127) {\n        // copy n bytes\n        for (let i = 0; i < n + 1 && outIndex < endOfSegment; ++i) {\n          out[outIndex] = data[inIndex++];\n          outIndex += imageFrame.samplesPerPixel;\n        }\n      } else if (n <= -1 && n >= -127) {\n        const value = data[inIndex++];\n        // run of n bytes\n\n        for (let j = 0; j < -n + 1 && outIndex < endOfSegment; ++j) {\n          out[outIndex] = value;\n          outIndex += imageFrame.samplesPerPixel;\n        }\n      }/* else if (n === -128) {\n\n      } // do nothing */\n    }\n  }\n  imageFrame.pixelData = new Uint8Array(outFrame);\n\n  return imageFrame;\n}\n\nfunction decode8Planar (imageFrame, pixelData) {\n  const frameData = pixelData;\n  const frameSize = imageFrame.rows * imageFrame.columns;\n  const outFrame = new ArrayBuffer(frameSize * imageFrame.samplesPerPixel);\n  const header = new DataView(frameData.buffer, frameData.byteOffset);\n  const data = new Int8Array(frameData.buffer, frameData.byteOffset);\n  const out = new Int8Array(outFrame);\n\n  let outIndex = 0;\n  const numSegments = header.getInt32(0, true);\n\n  for (let s = 0; s < numSegments; ++s) {\n    outIndex = s * frameSize;\n\n    let inIndex = header.getInt32((s + 1) * 4, true);\n    let maxIndex = header.getInt32((s + 2) * 4, true);\n\n    if (maxIndex === 0) {\n      maxIndex = frameData.length;\n    }\n\n    const endOfSegment = frameSize * numSegments;\n\n    while (inIndex < maxIndex) {\n      const n = data[inIndex++];\n\n      if (n >= 0 && n <= 127) {\n        // copy n bytes\n        for (let i = 0; i < n + 1 && outIndex < endOfSegment; ++i) {\n          out[outIndex] = data[inIndex++];\n          outIndex++;\n        }\n      } else if (n <= -1 && n >= -127) {\n        const value = data[inIndex++];\n        // run of n bytes\n\n        for (let j = 0; j < -n + 1 && outIndex < endOfSegment; ++j) {\n          out[outIndex] = value;\n          outIndex++;\n        }\n      }/* else if (n === -128) {\n\n      } // do nothing */\n    }\n  }\n  imageFrame.pixelData = new Uint8Array(outFrame);\n\n  return imageFrame;\n}\n\nfunction decode16 (imageFrame, pixelData) {\n  const frameData = pixelData;\n  const frameSize = imageFrame.rows * imageFrame.columns;\n  const outFrame = new ArrayBuffer(frameSize * imageFrame.samplesPerPixel * 2);\n\n  const header = new DataView(frameData.buffer, frameData.byteOffset);\n  const data = new Int8Array(frameData.buffer, frameData.byteOffset);\n  const out = new Int8Array(outFrame);\n\n  const numSegments = header.getInt32(0, true);\n\n  for (let s = 0; s < numSegments; ++s) {\n    let outIndex = 0;\n    const highByte = (s === 0 ? 1 : 0);\n\n    let inIndex = header.getInt32((s + 1) * 4, true);\n    let maxIndex = header.getInt32((s + 2) * 4, true);\n\n    if (maxIndex === 0) {\n      maxIndex = frameData.length;\n    }\n\n    while (inIndex < maxIndex) {\n      const n = data[inIndex++];\n\n      if (n >= 0 && n <= 127) {\n        for (let i = 0; i < n + 1 && outIndex < frameSize; ++i) {\n          out[(outIndex * 2) + highByte] = data[inIndex++];\n          outIndex++;\n        }\n      } else if (n <= -1 && n >= -127) {\n        const value = data[inIndex++];\n\n        for (let j = 0; j < -n + 1 && outIndex < frameSize; ++j) {\n          out[(outIndex * 2) + highByte] = value;\n          outIndex++;\n        }\n      }/* else if (n === -128) {\n\n      } // do nothing */\n    }\n  }\n  if (imageFrame.pixelRepresentation === 0) {\n    imageFrame.pixelData = new Uint16Array(outFrame);\n  } else {\n    imageFrame.pixelData = new Int16Array(outFrame);\n  }\n\n  return imageFrame;\n}\n\nexport default decodeRLE;\n","\n\nfunction decodeJPEGBaseline (imageFrame, pixelData) {\n  // check to make sure codec is loaded\n  if (typeof JpegImage === 'undefined') {\n    throw new Error('No JPEG Baseline decoder loaded');\n  }\n  const jpeg = new JpegImage();\n\n  jpeg.parse(pixelData);\n\n  // Do not use the internal jpeg.js color transformation,\n  // since we will handle this afterwards\n  jpeg.colorTransform = false;\n\n  if (imageFrame.bitsAllocated === 8) {\n    imageFrame.pixelData = jpeg.getData(imageFrame.columns, imageFrame.rows);\n\n    return imageFrame;\n  } else if (imageFrame.bitsAllocated === 16) {\n    imageFrame.pixelData = jpeg.getData16(imageFrame.columns, imageFrame.rows);\n\n    return imageFrame;\n  }\n}\n\nexport default decodeJPEGBaseline;\n","\n\nfunction decodeJPEGLossless (imageFrame, pixelData) {\n  // check to make sure codec is loaded\n  if (typeof jpeg === 'undefined' ||\n    typeof jpeg.lossless === 'undefined' ||\n    typeof jpeg.lossless.Decoder === 'undefined') {\n    throw new Error('No JPEG Lossless decoder loaded');\n  }\n\n  const byteOutput = imageFrame.bitsAllocated <= 8 ? 1 : 2;\n  // console.time('jpeglossless');\n  const buffer = pixelData.buffer;\n  const decoder = new jpeg.lossless.Decoder();\n  const decompressedData = decoder.decode(buffer, pixelData.byteOffset, pixelData.length, byteOutput);\n  // console.timeEnd('jpeglossless');\n\n  if (imageFrame.pixelRepresentation === 0) {\n    if (imageFrame.bitsAllocated === 16) {\n      imageFrame.pixelData = new Uint16Array(decompressedData.buffer);\n\n      return imageFrame;\n    }\n    // untested!\n    imageFrame.pixelData = new Uint8Array(decompressedData.buffer);\n\n    return imageFrame;\n\n  }\n  imageFrame.pixelData = new Int16Array(decompressedData.buffer);\n\n  return imageFrame;\n\n}\n\nexport default decodeJPEGLossless;\n","import decodeLittleEndian from './decoders/decodeLittleEndian.js';\nimport decodeBigEndian from './decoders/decodeBigEndian.js';\nimport decodeRLE from './decoders/decodeRLE.js';\nimport decodeJPEGBaseline from './decoders/decodeJPEGBaseline.js';\nimport decodeJPEGLossless from './decoders/decodeJPEGLossless.js';\nimport decodeJPEGLS from './decoders/decodeJPEGLS.js';\nimport decodeJPEG2000 from './decoders/decodeJPEG2000.js';\n\nfunction decodeImageFrame (imageFrame, transferSyntax, pixelData, decodeConfig, options) {\n  const start = new Date().getTime();\n\n  if (transferSyntax === '1.2.840.10008.1.2') {\n    // Implicit VR Little Endian\n    imageFrame = decodeLittleEndian(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.1') {\n    // Explicit VR Little Endian\n    imageFrame = decodeLittleEndian(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.2') {\n    // Explicit VR Big Endian (retired)\n    imageFrame = decodeBigEndian(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.1.99') {\n    // Deflate transfer syntax (deflated by dicomParser)\n    imageFrame = decodeLittleEndian(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.5') {\n    // RLE Lossless\n    imageFrame = decodeRLE(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.50') {\n    // JPEG Baseline lossy process 1 (8 bit)\n    imageFrame = decodeJPEGBaseline(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.51') {\n    // JPEG Baseline lossy process 2 & 4 (12 bit)\n    imageFrame = decodeJPEGBaseline(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.57') {\n    // JPEG Lossless, Nonhierarchical (Processes 14)\n    imageFrame = decodeJPEGLossless(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.70') {\n    // JPEG Lossless, Nonhierarchical (Processes 14 [Selection 1])\n    imageFrame = decodeJPEGLossless(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.80') {\n    // JPEG-LS Lossless Image Compression\n    imageFrame = decodeJPEGLS(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.81') {\n    // JPEG-LS Lossy (Near-Lossless) Image Compression\n    imageFrame = decodeJPEGLS(imageFrame, pixelData);\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.90') {\n    // JPEG 2000 Lossless\n    imageFrame = decodeJPEG2000(imageFrame, pixelData, decodeConfig, options);\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.91') {\n    // JPEG 2000 Lossy\n    imageFrame = decodeJPEG2000(imageFrame, pixelData, decodeConfig, options);\n  } else {\n    throw new Error(`no decoder for transfer syntax ${transferSyntax}`);\n  }\n\n  /* Don't know if these work...\n   // JPEG 2000 Part 2 Multicomponent Image Compression (Lossless Only)\n   else if(transferSyntax === \"1.2.840.10008.1.2.4.92\")\n   {\n   return decodeJPEG2000(dataSet, frame);\n   }\n   // JPEG 2000 Part 2 Multicomponent Image Compression\n   else if(transferSyntax === \"1.2.840.10008.1.2.4.93\")\n   {\n   return decodeJPEG2000(dataSet, frame);\n   }\n   */\n\n  const shouldShift = imageFrame.pixelRepresentation !== undefined && imageFrame.pixelRepresentation === 1;\n  const shift = (shouldShift && imageFrame.bitsStored !== undefined) ? (32 - imageFrame.bitsStored) : undefined;\n\n  if (shouldShift && shift !== undefined) {\n    for (let i = 0; i < imageFrame.pixelData.length; i++) {\n      // eslint-disable-next-line no-bitwise\n      imageFrame.pixelData[i] = (imageFrame.pixelData[i] << shift >> shift);\n    }\n  }\n\n  const end = new Date().getTime();\n\n  imageFrame.decodeTimeInMS = end - start;\n\n  return imageFrame;\n}\n\nexport default decodeImageFrame;\n","// an object of task handlers\nconst taskHandlers = {};\n\n// Flag to ensure web worker is only initialized once\nlet initialized = false;\n\n// the configuration object passed in when the web worker manager is initialized\nlet config;\n\n/**\n * Initialization function that loads additional web workers and initializes them\n * @param data\n */\nfunction initialize (data) {\n  // console.log('web worker initialize ', data.workerIndex);\n  // prevent initialization from happening more than once\n  if (initialized) {\n    return;\n  }\n\n  // save the config data\n  config = data.config;\n\n  // load any additional web worker tasks\n  if (data.config.webWorkerTaskPaths) {\n    for (let i = 0; i < data.config.webWorkerTaskPaths.length; i++) {\n      self.importScripts(data.config.webWorkerTaskPaths[i]);\n    }\n  }\n\n  // initialize each task handler\n  Object.keys(taskHandlers).forEach(function (key) {\n    taskHandlers[key].initialize(config.taskConfiguration);\n  });\n\n  // tell main ui thread that we have completed initialization\n  self.postMessage({\n    taskType: 'initialize',\n    status: 'success',\n    result: {\n    },\n    workerIndex: data.workerIndex\n  });\n\n  initialized = true;\n}\n\n/**\n * Function exposed to web worker tasks to register themselves\n * @param taskHandler\n */\nexport function registerTaskHandler (taskHandler) {\n  if (taskHandlers[taskHandler.taskType]) {\n    console.log('attempt to register duplicate task handler \"', taskHandler.taskType, '\"');\n\n    return false;\n  }\n  taskHandlers[taskHandler.taskType] = taskHandler;\n  if (initialized) {\n    taskHandler.initialize(config.taskConfiguration);\n  }\n}\n\n/**\n * Function to load a new web worker task with updated configuration\n * @param data\n */\nfunction loadWebWorkerTask (data) {\n  config = data.config;\n  self.importScripts(data.sourcePath);\n}\n\n/**\n * Web worker message handler - dispatches messages to the registered task handlers\n * @param msg\n */\nself.onmessage = function (msg) {\n  // console.log('web worker onmessage', msg.data);\n\n  // handle initialize message\n  if (msg.data.taskType === 'initialize') {\n    initialize(msg.data);\n\n    return;\n  }\n\n  // handle loadWebWorkerTask message\n  if (msg.data.taskType === 'loadWebWorkerTask') {\n    loadWebWorkerTask(msg.data);\n\n    return;\n  }\n\n  // dispatch the message if there is a handler registered for it\n  if (taskHandlers[msg.data.taskType]) {\n    taskHandlers[msg.data.taskType].handler(msg.data, function (result, transferList) {\n      self.postMessage({\n        taskType: msg.data.taskType,\n        status: 'success',\n        result,\n        workerIndex: msg.data.workerIndex\n      }, transferList);\n    });\n\n    return;\n  }\n\n  // not task handler registered - send a failure message back to ui thread\n  console.log('no task handler for ', msg.data.taskType);\n  console.log(taskHandlers);\n  self.postMessage({\n    taskType: msg.data.taskType,\n    status: 'failed - no task handler registered',\n    workerIndex: msg.data.workerIndex\n  });\n};\n","import { initializeJPEG2000 } from '../../shared/decoders/decodeJPEG2000.js';\nimport { initializeJPEGLS } from '../../shared/decoders/decodeJPEGLS.js';\nimport calculateMinMax from '../../shared/calculateMinMax.js';\nimport decodeImageFrame from '../../shared/decodeImageFrame.js';\n\n// flag to ensure codecs are loaded only once\nlet codecsLoaded = false;\n\n// the configuration object for the decodeTask\nlet decodeConfig;\n\n/**\n * Function to control loading and initializing the codecs\n * @param config\n */\nfunction loadCodecs (config) {\n  // prevent loading codecs more than once\n  if (codecsLoaded) {\n    return;\n  }\n\n  // Load the codecs\n  // console.time('loadCodecs');\n  self.importScripts(config.decodeTask.codecsPath);\n  codecsLoaded = true;\n  // console.timeEnd('loadCodecs');\n\n  // Initialize the codecs\n  if (config.decodeTask.initializeCodecsOnStartup) {\n    // console.time('initializeCodecs');\n    initializeJPEG2000(config.decodeTask);\n    initializeJPEGLS(config.decodeTask);\n    // console.timeEnd('initializeCodecs');\n  }\n}\n\n/**\n * Task initialization function\n */\nfunction initialize (config) {\n  decodeConfig = config;\n  if (config.decodeTask.loadCodecsOnStartup) {\n    loadCodecs(config);\n  }\n}\n\n/**\n * Task handler function\n */\nfunction handler (data, doneCallback) {\n  // Load the codecs if they aren't already loaded\n  loadCodecs(decodeConfig);\n\n  const strict = decodeConfig && decodeConfig.decodeTask && decodeConfig.decodeTask.strict;\n  const imageFrame = data.data.imageFrame;\n\n  // convert pixel data from ArrayBuffer to Uint8Array since web workers support passing ArrayBuffers but\n  // not typed arrays\n  const pixelData = new Uint8Array(data.data.pixelData);\n\n  decodeImageFrame(\n    imageFrame,\n    data.data.transferSyntax,\n    pixelData,\n    decodeConfig.decodeTask,\n    data.data.options);\n\n  if (!imageFrame.pixelData) {\n    throw new Error('decodeTask: imageFrame.pixelData is undefined after decoding');\n  }\n\n  calculateMinMax(imageFrame, strict);\n\n  // convert from TypedArray to ArrayBuffer since web workers support passing ArrayBuffers but not\n  // typed arrays\n  imageFrame.pixelData = imageFrame.pixelData.buffer;\n\n  // invoke the callback with our result and pass the pixelData in the transferList to move it to\n  // UI thread without making a copy\n  doneCallback(imageFrame, [imageFrame.pixelData]);\n}\n\nexport default {\n  taskType: 'decodeTask',\n  handler,\n  initialize\n};\n","import { registerTaskHandler } from './webWorker.js';\nimport decodeTask from './decodeTask/decodeTask.js';\nimport { default as version } from '../version.js';\n\n// register our task\nregisterTaskHandler(decodeTask);\n\nconst cornerstoneWADOImageLoaderWebWorker = {\n  registerTaskHandler,\n  version\n};\n\nexport {\n  registerTaskHandler,\n  version\n};\n\nexport default cornerstoneWADOImageLoaderWebWorker;\n"],"sourceRoot":""}